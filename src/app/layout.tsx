import type { Metadata } from "next";

import { Geist, Geist_Mono } from "next/font/google"; // Importing Google Fonts  

import "./globals.css";

// Setting up the fonts with CSS variables
// Using the Geist font for sans-serif text
// The variable name is set to --font-geist-sans for use in css
// The subsets option specifies which character sets to include, in this case latin characters
// This setup allows for easy application of the font throughout the application using the defined CSS variable 
// End of geistSans font setup
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

// Using the Geist Mono font for monospaced text
// The variable name is set to --font-geist-mono for use in css
// The subsets option specifies which character sets to include, in this case latin characters
// This setup allows for easy application of the font throughout the application using the defined CSS variable 
// End of geistMono font setup
const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Metadata for the application
// This metadata can be used for SEO and social sharing purposes
// The title and description are set here
// This metadata will be included in the head of the HTML document
// End of metadata definition
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Root layout component that wraps the entire application with HTML structure and body styling 
// The component takes children as props, which are the nested components to be rendered inside the layout
// The layout includes the HTML and body tags
// The body tag includes classes for font and antialiasing
// The fonts are applied using CSS variables defined earlier
// This layout will be used across all pages of the application
// End of RootLayout component definition
export default function RootLayout({
  children, // Children components to be rendered inside the layout 
  // React.ReactNode type ensures that any valid React element can be passed as children 
  // Readonly ensures that the props cannot be modified
  // This is useful for maintaining the integrity of the layout components
  // The layout includes the HTML and body tags
  // The body tag includes classes for font and antialiasing
  // The fonts are applied using CSS variables defined earlier
  // This layout will be used across all pages of the application

}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
    <body
    // Applying the font variables and antialiasing to the body
    // This ensures that the entire application uses the defined fonts and has smooth font rendering 
    // End of body tag 

    className={`${geistSans.variable} ${geistMono.variable} antialiased`}
  >
    {children} {/* Rendering the children components inside the body */}
    </body>
    </html>
  );
}
